name: Release
on:
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a normal Release instead of a Prerelease'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write
  issues: write
  pages: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "action@github.com"

      - name: Get Version
        id: version
        env:
          FORCE_RELEASE: ${{ github.event.inputs.force_release || false }}
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          LATEST_VERSION=$(grep -E '^## [0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -1 | sed 's/^## //')

          if [ -z "$LATEST_VERSION" ] || [ "$PACKAGE_VERSION" != "$LATEST_VERSION" ]; then
            echo "Version mismatch: package.json ($PACKAGE_VERSION) vs CHANGELOG.md ($LATEST_VERSION)"
            exit 1
          fi

          VERSION="$PACKAGE_VERSION"
          PATCH=$(echo "$VERSION" | awk -F. '{print $3}')
          if [ "$PATCH" = "0" ]; then
            PRE_RELEASE=false
          else
            PRE_RELEASE=true
          fi

          # Allow manual override from workflow_dispatch input to force a Release
          # When FORCE_RELEASE is 'true', always treat as a normal release
          if [ "$FORCE_RELEASE" = "true" ]; then
            PRE_RELEASE=false
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pre_release=$PRE_RELEASE" >> $GITHUB_OUTPUT
          echo "Versions match: $VERSION"

      - name: Setup Node
        uses: ./.github/actions/setup-node-pnpm

      - name: Create Branch and Tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH_NAME="release/v${VERSION}"

          git checkout -b "$BRANCH_NAME"
          git push origin "$BRANCH_NAME"

          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      - name: Package
        run: pnpm package
        env:
          BUILD_TYPE:
            ${{ steps.version.outputs.pre_release == 'true' && 'Pre-release' ||
            'Release' }}

      - name: Extract Changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          CHANGELOG_CONTENT=$(awk "/^## $VERSION$/{flag=1; next} (/^## / || /^<details>/){flag=0} flag" CHANGELOG.md)

          if [ -z "$CHANGELOG_CONTENT" ]; then
            echo "Warning: No changelog content found for version $VERSION"
            CHANGELOG_CONTENT="- No changelog content available"
          fi

          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish to Marketplace
        run: |
          if [ "${{ steps.version.outputs.pre_release }}" = "true" ]; then
            pnpm run publish --pre-release
          else
            pnpm run publish
          fi
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          files: ./*.vsix
          prerelease: ${{ steps.version.outputs.pre_release }}
          generate_release_notes: false
          body: |
            üéâ New release v${{ steps.version.outputs.version }}

            ## What's Changed
            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}

            ${{ steps.version.outputs.pre_release == 'true' && '‚ö†Ô∏è **This is a pre-release version.**' || '' }}

            ## Installation
            Download the `.vsix` file below and install it manually in VS Code, or install from the marketplace.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: extension-${{ steps.version.outputs.version }}
          path: ./*.vsix
          if-no-files-found: error
      - name: Generate Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ./*.vsix

      - name: Setup Python
        uses: ./.github/actions/setup-python
      - name: Deploy Docs
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PRE_RELEASE="${{ steps.version.outputs.pre_release }}"

          MIKE_VERSION=$(echo $VERSION | sed -E 's/^([0-9]+\.[0-9]+)\..*$/\1/')

          git fetch origin gh-pages --depth=1
          if [ "$PRE_RELEASE" = "false" ]; then
            mike deploy --push --update-aliases "$MIKE_VERSION" "latest"
            echo "Deployed version $MIKE_VERSION and alias latest"
          else
            mike deploy --push "$MIKE_VERSION"
            echo "Deployed version $MIKE_VERSION only"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Issues
        if: success() && steps.version.outputs.pre_release != 'true'
        uses: ./.github/actions/close-waiting-issues
        env:
          VERSION: ${{ steps.version.outputs.version }}

  deploy-docs:
    runs-on: ubuntu-latest
    needs: release
    if: success()
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
